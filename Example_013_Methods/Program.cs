// // Методы
// // Вид 1 // Метод который ничего не принимает и не возвращает.
// void Method1()
// {
//     Console.WriteLine ("Автор ...");
// }
// Method1(); // вызов метода


// // Вид 2 - Методы, которые ничего не возвращают, но что-то принимают, например какие то аргументы.
// void Method2(string msg)
// {
//     Console.WriteLine (msg);
// }
// Method2("Текст сообщения"); // не именованный аргумент
// Method2(msg:"Текст сообщения"); // именованные аргументы, в начале пишем название аргрумента, далее его содержимое

// void Method21(string msg, int count)
// {
//     int i = 0;
//     while (i < count)
//     {
//         Console.WriteLine (msg);
//         i++;
//     }
// }
// //Method21("Текст сообщения", 4); //мы хотим получать это сообщение 4 раза.
// Method21(msg: "Текст сообщения", count: 4); //либо так, именованные значения.

// // Вид 3 – Методы, которые что-то возвращают, но ничего не принимают.

// int Method3()
// {
//     return DateTime.Now.Year;
// }

// int year = Method3();
// Console.WriteLine(year);

// // Вид 4 - Методы, которые что то принимают и что то возвращают
// string Method4(int count, string text)
// {
//     int i = 0;
//     string result = String.Empty;

//         while (i < count)
//         {
//             result = result + text;
//             i++;     
//         }
//    return result;
// }

// string res = Method4(10, "asdf");
// Console.WriteLine(res);

// Цикл for. Тот же метод 4 только через for

// string Method4(int count, string text)
// {
//     string result = String.Empty;
//     for ( int i = 0; i < count; i++) // Синтаксис цикла for. Пишем for, в скобках 1 Инициализация счётчика (int i = 0), далее проверка условия (i < count), инкримент (i++)
//         {
//             result = result + text;    
//         }
//    return result;
// }

// string res = Method4(10, "z");
// Console.WriteLine(res);

// Цикл в цикле
// for (int i = 2; i<=10; i++)
// {
//     for (int j = 2; j < 10; j++)
//     {
//         Console.WriteLine($"{i} * {j} = {i*j}"); // интерполяция строк
//     }
//     Console.WriteLine(); //разрыв между блоками
// }

//=====Работа с текстом
// Дан текст. В тексте нужно все пробелы заменить чёрточками,
// маленькие буквы “к” заменить большими “К”,
// а большие “С” маленькими “с”.
// Ясна ли задача?

// string text = "— Я думаю, — сказал князь, улыбаясь, — что,"
//             + "ежели бы вас послали вместо нашего милого Винценгероде,"
//             + "вы бы взяли приступом согласие прусского короля."
//             + "Вы так красноречивы. Вы дадите мне чаю?";

//string s = "qwerty"
//            012
//s[3] // r

// string Replace(string text, char oldValue, char newValue) // это 4й вид метода. названи метод Replace. далее входной текст (string text), далее указываем конкретный символ (oldValuem) и конкретный символ, на который будем менять (newValuem)
// {
//     string result = String.Empty; // заводим новую пустую строку

//     int lengh = text.Length; // указываем количество символов в строке. считаем его с помощью Length. например в слове "qwerty" выдаст 6
//     for ( int i = 0; i < lengh; i++) // пробегаемся от нулевого символа (int i = 0) до конца строки (i < lengh)
//     {
//         if(text[i] == oldValue) result = result + $"{newValue}"; // если текущий символ (text[i]) совпал с тем, который мы хотим заменить (oldValue), то в результат нужно будет положить новое значение строки (newValue)
//         else result = result + $"{text[i]}"; // если совпадений не обнаружено, то в резалт нужно добавить текущий символ
//     }
//     return result; //вернуть результат
// }

// string newText = Replace(text, ' ', '|'); // запускаем, смотрим что получилось. Меняем пробел (' ') на чёрточки ('|')
// Console.WriteLine(newText); // выводим новый текст (с заменёнными пробелами на полоски)
// Console.WriteLine();//пустую строку добавляем. пропуск.
//newText = Replace(newText, 'к', 'К'); // играемся. меняем маленькие буквы к на большие К
// Console.WriteLine(newText);

// //сортировка массива. от меньшего к большему. Упорядочивание данных внутри массива. Алгоритм сортировки методом выбора. Алгоритм сортировки методом минимакса. Алгоритм сортировки методом максимального. Или выбором максимально.
//задача: есть массив значений (последовательность чисел) [6, 8, 3, 2, 1, 4, 5, 7]. 
//наша задача выбрать самый первый элемент, в оставшейся части определить минимальный, после того как он найде, нужно поменять рабочее (текущее) значение (6), на минимальное (1) в выделенном куске
//следующий шаг, выбираем следующий рабочий элемент, (8), при этом считаем что (1) уже отсортирована, её касаться не нужно. 
//далее в неотсортированном кусочке выбрать снова минимальный. поменять с рабочим. и в итоге получаем подмассив из двух отсортированных элементов.
//и так до момента, пока весь массив не будет отсортирован.

// int[] arr = {1, 5, 4, 3, 2, 6, 7, 1, 1}; // завели массив, который будем отсортировывать. / Почему скобки фигурные а не квадратные?

// void PrintArray(int[] array) // будет выводить данный массив на экран. этот метод void. В качестве аргумента будет приходить массив (int[] array)
// {
//     int count = array.Length; // получение различных элементов будут давать разные наименования
//     for (int i = 0; i < count; i++) // цикл for, которым мы пробегаем по всем элементам нашего массива
//     {
//         Console.Write($"{array[i]} "); // и показываем на экране. вывод будет осуществляться в одну строку (Write, а WriteLine это на след строке). эррей итая (array[i])
//     }
//     Console.WriteLine(); // после вывода покажем просто пустую строчку
// }

// void SelectionSort(int[] array) // метод, который будет упорядочивать наш массив. В качестве аргумента будет приходить массив (int[] array)
// {
//     for (int i = 0; i < array.Length -1; i++) // цикл for, у которого в качестве аргументов указание первого значения массива (int i = 0), далее смотрим на длину массива (i < array.Length -1), где искуственно еденицу отнимаем, т.к. мы начинаем поиск от (i+1), где i меняется до максимального (array.Length), тогда (i+1) даст общее количество элементов и переходим к следующему значению массива (инкремент i++)
//     {
//         int minPosition = i; //определяем ту позицию, на которую смотрим. запоминаем ту позицию, рабочий элемента, над которую мы в дальнейшем будем производить какие то действия.

//         for (int j = i + 1; j < array.Length; j++)  // цикл внутри цикла. ищет минимальный элемент со следующей позиции после первой (i + 1). идём до последнего элемента (array.Length)
//         {
//             if(array[j] < array[minPosition]) minPosition = j; // ищем минимальный элемент. для этого, смотрим текущий (array[j]), если он меньше того, который мы преполагали на минимальной позиции (< array[minPosition]), то нужно будет эту позицию сохранить (minPosition = j)
//         }

//         int temporary = array[i]; // поменять значение с той позицией, которую мы нашли
//         array[i] = array[minPosition]; // в итую позицию мы должны будем положить тот элемент, который будет найден в процессе этого куска кода.
//         array[minPosition] = temporary; // обмен позиций местами. обе строчки это делают.
            //в этих трёх строках производится swap
//     }
// }

// PrintArray(arr);
// SelectionSort(arr);
// PrintArray(arr);

//сортировка массива. от большего к меньшему.
int[] arr = {1, 5, 4, 3, 2, 6, 7, 1, 1};

void PrintArray(int[] array)
{
    int count = array.Length;
    for (int i = 0; i < count; i++)
    {
        Console.Write($"{array[i]} ");
    }
    Console.WriteLine();
}

void SelectionSort(int[] array)
{
    for (int i = 0; i < array.Length -1; i++)
    {
        int maxPosition = i;

        for (int j = i + 1; j < array.Length; j++)  // ищет максимальный элемент
        {
            if(array[j] > array[maxPosition]) maxPosition = j;
        }

        int temporary = array[i];
        array[i] = array[maxPosition];
        array[maxPosition] = temporary;
    }
}

PrintArray(arr);
SelectionSort(arr);
PrintArray(arr);