// string[,] table = new string[2,5]; //определяет таблицу строк. 2 строчки, 5 столбцов. считается от 1.
// table[1,2] = "слово"; // для того, чтобы обратиться к нужному элементу, указываем наименование массива (table), далее индекс строки (1), и индекс стобца (2), и указываем значение, которое хотим записать в эту ячейку (слово), как обычная переменна.
// // индексы меняются от нуля table[0,0]
// //для строки инициализация будет такой константой: String.Empty, те. значение будет показываться пустой строкой.
// //т.к. мы задали только 2 строки, максимальный индекс будет 1 (table[1,0])
// //максимум столбиков у нас будет 5 элементов, 
// //table[0,0] table[0,1] table[0,3] table[0,4]
// //table[1,0] table[1,1] table[1,3] table[1,4]

// for (int rows = 0; rows < 2; rows++) //делаем цикл в цикле, чтобы распечатать данный массив. смотрим на строки (rows)
//     {
//         for (int columns = 0; columns < 5; columns++)  // внутренний, вложенный цикл. смотрим на колокни (columns)
//         {
//             Console.WriteLine($"-{table[rows, columns]}-");
//         }
//     }


// //пробуем сделать метод, который будет заполнять матрицу случайными числами
// void PrintArray(int[,] matr) //. в качестве аргумента передаем прямоугольную таблицу чисел (матрицу)
// {

//     for (int i = 0; i < matr.GetLength(0); i++) //делаем цикл в цикле, чтобы распечатать данный массив. смотрим на строки (i - так каще всего именуют, но понятнее конечно rows) итые элементы. Получаем количество строк (matrix.GetLength(0)) где 0 это идекс количества строк.
//     {
//             for (int j = 0; j < matr.GetLength(1); j++)  // внутренний, вложенный цикл. смотрим на колокни (j - так каще всего именуют, но понятнее конечно columns) житые элементы. Получаем количество столбцов (matrix.GetLength(1)) где 1 это идекс количества столбцов.
//             {
//                 Console.Write($"{matr[i, j]} ");
//             }
//         Console.WriteLine();
//     }
// }

// //опишем дополнительный метод, который будет заполнять нашу матрицу случайными цифрами.
// void FillArray(int[,] matr)
// {
//     for (int i = 0; i < matr.GetLength(0); i++)
//     {
//         for (int j = 0; j < matr.GetLength(1); j++)
//         {
//             matr[i, j] = new Random().Next(1,10); //орбащаемся к элементу итой житой (atr[i, j]). и с помощью метода случайных чисел (Random().Next(1,10)) с интервалом от 1 до 10, где последний элемент 9. Это полуинтервал [1,10)
//         }
//     }
// }

// //попрбуем сделать тоже самое с числами. 
// int[,] matrix = new int[3,4]; //делаем двумерный массив из 3х строк и 4 столбцов. печатаем на экран матрицу. перенесли вниз, чтобы инициализация нашего массива была рядом с вызовом на печать.

// PrintArray(matrix); // в качестве аргумента передаём матрицу, которую сделали выше. сначала инициализируем метод. убедимся, что у нас нолики.
// FillArray(matrix); //заполним массив
// Console.WriteLine(); // добавляем разрыв строки
// PrintArray(matrix); // снова распечатаем

// //рисуем руку
// int[,] pic = new int[,] 
// { 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, 
// {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }, 
// {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 }, 
// {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };

// void PrintImage(int[,] image) //. в качестве аргумента передаем прямоугольную таблицу чисел (матрицу) PrintArray делает как нули так и еденицы.
// {

//     for (int i = 0; i < image.GetLength(0); i++) //делаем цикл в цикле, чтобы распечатать данный массив. смотрим на строки (i - так каще всего именуют, но понятнее конечно rows) итые элементы. Получаем количество строк (matrix.GetLength(0)) где 0 это идекс количества строк.
//     {
//             for (int j = 0; j < image.GetLength(1); j++)  // внутренний, вложенный цикл. смотрим на колокни (j - так каще всего именуют, но понятнее конечно columns) житые элементы. Получаем количество столбцов (matrix.GetLength(1)) где 1 это идекс количества столбцов.
//             {
//                //Console.Write($"{matr[i, j]} ");
//                 if(image[i,j] == 0) Console.Write($" "); //если элемет итый житый будет совпадать с ноликом, будем печатать пробел.
//                 else Console.Write($"+"); //если 1, то печатаем плюсик
//             }
//         Console.WriteLine();
//     }
// }

// //опишем метод, который будет закрашивать нашу картинку
// void FillImage(int row, int col)  //в качестве аргумента укажем позицию и строка и колонка, с которой будем начинать закраску
// {
//     if (pic[row, col] == 0)
//     {
//         pic[row, col] = 1;
//         FillImage(row - 1, col);
//         FillImage(row, col -1);
//         FillImage(row + 1, col);
//         FillImage(row, col + 1);
//     }
// }

// PrintImage(pic);
// FillImage(13,13);
// PrintImage(pic);

// //Вычислим факториал
// //Определим функцию или метод, который будет принимать число, факториал которого нужно вычислить. Как вы понимаете, это снова метод, который принимает какой-то аргумент (в частности, число) и возвращает факториал этого числа.
// double Factorial (int n)
// {
//     //1! = 1
//     //0! = 1
//     if(n == 1) return 1;
//     else return n * Factorial (n - 1);
// }

// for (int i = 1; i < 40; i++)
// {
//   //Console.WriteLine(Factorial(i));
//   Console.WriteLine($"{i}! = {Factorial(i)}");
// }
// //Console.WriteLine(Factorial(5)); // факториал трёх, это 1*2*3 = 6
// //факториал 17 не помещается. связано с переполнением integer 17! = -288522240 

//Числа Фибоначчи
//Для начала укажем определение. Первое число можно указать как f(1)=1, дальше — f(2)=1. Для всех следующих — то есть, f(n) — мы определяем числа Фибоначчи как f(n-1) + f(n-2). Давайте напишем этот код.
// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)
double Fibonacci(int n)
{
    if (n == 1 || n == 2) return 1; // где || это или
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}

for (int i = 1; i < 50; i++)
{
    //Console.WriteLine(Fibonacci(i));
    Console.WriteLine($"f({i}) = {Fibonacci(i)}");
}

